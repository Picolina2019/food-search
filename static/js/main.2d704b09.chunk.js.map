{"version":3,"sources":["components/RecipeDetails.js","components/Recipe.js","components/Aler.js","App.js","serviceWorker.js","index.js"],"names":["RecipeDetails","ingredients","map","ingredient","key","uuidv4","className","text","Recipe","recipe","useState","show","setShow","label","image","url","src","alt","href","target","rel","onClick","Alert","alert","App","query","setQuery","recipes","setRecipes","setAlert","Url","useEffect","getData","a","axios","get","result","data","more","hits","length","onSubmit","e","preventDefault","Aler","type","placeholder","autoComplete","onChange","value","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mTAkBeA,EAdO,SAAC,GACnB,OADqC,EAAjBC,YACDC,KAAM,SAAAC,GACrB,OACI,wBAAIC,IAAKC,cAAUC,UAAU,mBACzB,wBAAIA,UAAU,mBAAd,KACOH,EAAWI,WCUnBC,EAhBA,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAAY,EACFC,oBAAS,GADP,mBAClBC,EADkB,KACZC,EADY,OAEgBH,EAAOA,OAAzCI,EAFkB,EAElBA,MAAOC,EAFW,EAEXA,MAAOC,EAFI,EAEJA,IAAKd,EAFD,EAECA,YAC1B,OACI,yBAAKK,UAAU,UACZ,4BAAKO,GACL,yBAAKG,IAAKF,EAAOG,IAAKJ,IACtB,uBAAGK,KAAMH,EAAKI,OAAO,SAASC,IAAI,uBAAlC,uBAGA,4BAAQC,QAAS,kBAAKT,GAASD,KAA/B,eACEA,GAAQ,kBAAC,EAAD,CAAeV,YAAaA,MCHlCqB,MATf,YAAyB,IAATC,EAAQ,EAARA,MACZ,OACI,yBAAKjB,UAAU,SACb,gCAAMiB,KCmEDC,MAhEf,WAAgB,IAAD,EAEWd,mBAAS,WAFpB,mBAEPe,EAFO,KAEAC,EAFA,OAGahB,mBAAS,IAHtB,mBAGRiB,EAHQ,KAGCC,EAHD,OAIWlB,mBAAS,IAJpB,mBAIPa,EAJO,KAIAM,EAJA,KAOTC,EAAI,mCAAD,OAAqCL,EAArC,mBAFI,WAEJ,oBADK,oCAGdM,qBAAU,WAERC,IACAH,EAAS,IACTH,EAAS,MACT,CAACC,IAGH,IAAMK,EAAO,uCAAG,4BAAAC,EAAA,yDACA,KAAVR,EADU,iCACwBS,IAAMC,IAAIL,GADlC,WACUM,EADV,QAEDC,KAAKC,KAFJ,yCAGHT,EAAS,2BAHN,OAKdD,EAAWQ,EAAOC,KAAKE,MACvBV,EAAS,IANK,wBAQdA,EAAS,wBARK,4CAAH,qDAyBX,OAEE,yBAAKvB,UAAU,OAEb,gDACEqB,EAAQa,OACV,oCACA,0BAAMlC,UAAU,cAAcmC,SAnBnB,SAAAC,GACfA,EAAEC,iBACFX,IACAN,EAAS,MAiBM,KAAVH,GAAgB,kBAACqB,EAAD,CAAOrB,MAAOA,IAC7B,2BAAOsB,KAAM,OAAOC,YAAY,cAChCC,aAAa,MAAMC,SAfZ,SAACN,GACdhB,EAASgB,EAAEvB,OAAO8B,QAeZA,MAAOxB,IACP,2BAAOoB,KAAK,SAASI,MAAM,YAE7B,yBAAK3C,UAAU,WACpBqB,GAAWA,EAAQzB,KAAI,SAAAO,GAAM,OAAI,kBAAC,EAAD,CAAQL,IAAKC,cAAUI,OAAQA,SAVxC,uBAAGH,UAAU,WAAb,gBC3CL4C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2d704b09.chunk.js","sourcesContent":["import React from 'react'\nimport { v4 as uuidv4 } from 'uuid';\n\n\nconst RecipeDetails = ({ingredients}) => {\n    return ingredients.map ( ingredient =>{\n        return (\n            <ul key={uuidv4()} className='ingredient-list'>\n                <li className='ingredient-text'>\n                    * {ingredient.text}\n                </li>\n               \n            \n            </ul>\n        )\n    })\n}\n\nexport default RecipeDetails\n","import React, {useState} from 'react';\nimport RecipeDetails from './RecipeDetails';\n\nconst Recipe = ({recipe}) => {\n    const [show, setShow]= useState(false);\n    const {label, image, url, ingredients} = recipe.recipe;\n    return (\n        <div className='recipe'>\n           <h2>{label}</h2>\n           <img src={image} alt={label}/>\n           <a href={url} target='_blank' rel='noopener noreferrer'>\n               More details URL =>\n           </a>\n           <button onClick={()=> setShow(!show)}>Ingredients</button>\n           { show && <RecipeDetails ingredients={ingredients}/>}\n    </div>\n    )\n}\n\nexport default Recipe\n","import React from 'react'\n\nfunction Alert({alert}) {\n    return (\n        <div className='alert'>\n          <h3> {alert}</h3> \n            \n        </div>\n    )\n}\n\nexport default Alert\n","import React, {useState, useEffect} from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport Recipe from './components/Recipe';\nimport { v4 as uuidv4 } from 'uuid';\nimport Alert from './components/Aler';\n\n\nfunction App() {\n\nconst [ query, setQuery]= useState('coconut');\nconst [recipes, setRecipes]=useState([]);\nconst [ alert, setAlert]= useState('');\nconst APP_ID='28e99779';\nconst API_KEY='d41937ac487d56f1ddec6e8cab3e5493';\nconst Url= `https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${API_KEY}`;\n\nuseEffect(()=>{\n  \n  getData();\n  setAlert('');\n  setQuery('')\n},[recipes]);\n\n\nconst getData = async()=>{\n  if (query !== ''){const result= await axios.get(Url);\n    if(!result.data.more){\n      return setAlert('No food with such name');\n    }\n  setRecipes(result.data.hits);\n  setAlert('')\n}else{\n  setAlert('Please fill the form');\n}\n  \n}\n\nconst onSubmit = e =>{\n  e.preventDefault();\n  getData();\n  setQuery('');\n\n  \n}\nconst onChange=(e)=>{\n  setQuery(e.target.value);\n\n\n}\n  return (\n    \n    <div className=\"App\">\n      \n      <h1>Recipe Searching</h1>\n      {!recipes.length ?(<p className='loading'>Loading...</p>):\n      <>\n      <form className='search-form' onSubmit={onSubmit} >\n      {alert !== '' && <Alert alert={alert}/>}\n        <input type= 'text' placeholder='Search Food' \n        autoComplete='off' onChange={onChange}\n        value={query}/>\n        <input type='submit' value='search'/>\n      </form>\n      <div className='recipes'>\n{recipes && recipes.map(recipe => <Recipe key={uuidv4()} recipe={recipe}/>)}\n      </div>\n      </>}\n    </div>\n  );\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}